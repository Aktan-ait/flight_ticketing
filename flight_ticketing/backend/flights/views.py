from datetime import timedelta, date, datetime
from django.db.models import Sum, Min, Count
from django.utils.timezone import now
from django.db.models.functions import TruncDate
from django.http import HttpResponse
import csv

from rest_framework import viewsets, permissions
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.exceptions import PermissionDenied
from rest_framework.pagination import PageNumberPagination
from rest_framework.filters import OrderingFilter, SearchFilter
from django_filters.rest_framework import DjangoFilterBackend

from .models import Flight
from .serializers import FlightSerializer
from .permissions import IsManagerOrAdmin, IsOwnerCompanyFlightOrAdmin
from .filters import FlightFilter
from companies.models import Company
from tickets.models import Ticket
from tickets.serializers import TicketWithUserSerializer


class StandardResultsSetPagination(PageNumberPagination):
    page_size = 10
    page_size_query_param = 'page_size'
    max_page_size = 100


class FlightViewSet(viewsets.ModelViewSet):
    queryset = Flight.objects.all().order_by('-departure_time')
    serializer_class = FlightSerializer
    pagination_class = StandardResultsSetPagination

    filter_backends = [DjangoFilterBackend, OrderingFilter, SearchFilter]
    filterset_class = FlightFilter
    ordering_fields = ['price', 'departure_time', 'arrival_time']
    search_fields = ['flight_number', 'origin', 'destination']

    def get_permissions(self):
        if self.action in ['create']:
            return [IsManagerOrAdmin()]
        elif self.action in ['update', 'partial_update', 'destroy']:
            return [IsOwnerCompanyFlightOrAdmin()]
        elif self.action in ['passengers']:
            return [IsOwnerCompanyFlightOrAdmin()]
        elif self.action in ['stats_my']:
            return [IsManagerOrAdmin()]
        return [permissions.AllowAny()]

    def get_queryset(self):
        qs = super().get_queryset()
        req = self.request
        user = req.user
        mine = req.query_params.get('mine')
        if mine and user.is_authenticated and getattr(user, 'role', None) == 'manager':
            try:
                company = Company.objects.get(manager=user)
                qs = qs.filter(company=company)
            except Company.DoesNotExist:
                return Flight.objects.none()
        return qs

    def perform_create(self, serializer):
        user = self.request.user
        if getattr(user, 'role', None) == 'manager':
            try:
                company = Company.objects.get(manager=user)
            except Company.DoesNotExist:
                raise PermissionDenied('–£ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏')
            serializer.save(company=company)
        elif getattr(user, 'role', None) == 'admin':
            serializer.save()
        else:
            raise PermissionDenied('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞')

    def perform_update(self, serializer):
        instance = self.get_object()
        has_bookings = Ticket.objects.filter(flight=instance, status='booked').exists()
        if has_bookings:
            blocked_fields = {'departure_time', 'arrival_time', 'price', 'total_seats'}
            changing = blocked_fields.intersection(set(serializer.validated_data.keys()))
            if changing:
                raise PermissionDenied(
                    f"–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å {', '.join(sorted(changing))} ‚Äî –ø–æ —Ä–µ–π—Å—É –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏"
                )
        serializer.save()

    def destroy(self, request, *args, **kwargs):
        instance = self.get_object()
        if Ticket.objects.filter(flight=instance).exists():
            raise PermissionDenied('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–µ–π—Å: —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã')
        return super().destroy(request, *args, **kwargs)

    # üî∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏–∏)
    @action(detail=False, methods=['get'], url_path='stats/my', permission_classes=[IsManagerOrAdmin])
    def stats_my(self, request):
        user = request.user
        if user.role == 'admin':
            return Response({"detail": "–î–ª—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"})
        try:
            company = Company.objects.get(manager=user)
        except Company.DoesNotExist:
            return Response({"detail": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"}, status=404)

        window = request.query_params.get('window', 'month')
        now_dt = now()
        start = None
        if window == 'day':
            start = now_dt - timedelta(days=1)
        elif window == 'week':
            start = now_dt - timedelta(weeks=1)
        elif window == 'month':
            start = now_dt - timedelta(days=30)

        flights = Flight.objects.filter(company=company)
        if start:
            flights = flights.filter(departure_time__gte=start)

        total_flights = flights.count()
        upcoming = flights.filter(departure_time__gte=now_dt).count()
        completed = flights.filter(departure_time__lt=now_dt).count()

        tickets_qs = Ticket.objects.filter(flight__in=flights)
        total_passengers = tickets_qs.count()
        revenue = tickets_qs.filter(status='booked').aggregate(s=Sum('price'))['s'] or 0

        return Response({
            'window': window,
            'total_flights': total_flights,
            'upcoming': upcoming,
            'completed': completed,
            'total_passengers': total_passengers,
            'revenue': float(revenue),
        })

    # üî∏ —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Ä–µ–π—Å–∞ + —Å–≤–æ–¥–∫–∞
    @action(detail=True, methods=['get'], url_path='passengers', permission_classes=[IsOwnerCompanyFlightOrAdmin])
    def passengers(self, request, pk=None):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ —Ä–µ–π—Å–∞ + —Å–≤–æ–¥–∫—É.
        """
        flight = self.get_object()
        tickets = Ticket.objects.select_related('user').filter(flight=flight).order_by('seat', '-booked_at')

        data = TicketWithUserSerializer(tickets, many=True).data
        revenue = tickets.filter(status='booked').aggregate(s=Sum('price'))['s'] or 0

        return Response({
            'flight_id': flight.id,
            'flight_number': flight.flight_number,
            'origin': flight.origin,
            'destination': flight.destination,
            'count': len(data),
            'revenue': float(revenue),
            'tickets': data,
        })

    # üî∏ CSV-–≤—ã–≥—Ä—É–∑–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
    @action(detail=True, methods=['get'], url_path='passengers/csv', permission_classes=[IsOwnerCompanyFlightOrAdmin])
    def passengers_csv(self, request, pk=None):
        """
        CSV-–≤—ã–≥—Ä—É–∑–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –ø–æ —Ä–µ–π—Å—É.
        """
        flight = self.get_object()
        qs = Ticket.objects.select_related('user').filter(flight=flight).order_by('seat', '-booked_at')

        response = HttpResponse(content_type='text/csv; charset=utf-8')
        filename = f'passengers-flight-{flight.flight_number}-{flight.id}.csv'
        response['Content-Disposition'] = f'attachment; filename="{filename}"'

        writer = csv.writer(response)
        writer.writerow([
            'Confirmation', 'Status', 'Seat', 'Price',
            'Booked at', 'Username', 'Email', 'Flight', 'Origin', 'Destination'
        ])
        for t in qs:
            writer.writerow([
                t.confirmation_id, t.status, t.seat or '',
                f'{t.price}', t.booked_at.strftime('%Y-%m-%d %H:%M'),
                getattr(t.user, 'username', ''), getattr(t.user, 'email', ''),
                flight.flight_number, flight.origin, flight.destination
            ])
        return response

    # üî∏ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
    @action(detail=False, methods=['get'], url_path='price-calendar')
    def price_calendar(self, request):
        """
        GET /api/flights/price-calendar/?origin=&destination=&start=YYYY-MM-DD&days=30
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [{date:'YYYY-MM-DD', min_price:float, flights:int}, ...]
        """
        origin = request.query_params.get('origin', '').strip()
        destination = request.query_params.get('destination', '').strip()
        start_str = request.query_params.get('start', '')
        days = int(request.query_params.get('days', '30'))
        if days < 1:
            days = 1
        if days > 120:
            days = 120

        if start_str:
            try:
                start_date = datetime.strptime(start_str, '%Y-%m-%d').date()
            except ValueError:
                start_date = date.today()
        else:
            start_date = date.today()

        end_date = start_date + timedelta(days=days - 1)

        qs = Flight.objects.filter(
            departure_time__date__gte=start_date,
            departure_time__date__lte=end_date
        )
        if origin:
            qs = qs.filter(origin__icontains=origin)
        if destination:
            qs = qs.filter(destination__icontains=destination)

        agg = (
            qs.annotate(d=TruncDate('departure_time'))
            .values('d')
            .annotate(min_price=Min('price'), flights=Count('id'))
            .order_by('d')
        )

        data = [
            {'date': a['d'].isoformat(), 'min_price': float(a['min_price']), 'flights': a['flights']}
            for a in agg
        ]
        return Response({'start': start_date.isoformat(), 'days': days, 'items': data})
